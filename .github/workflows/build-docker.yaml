name: Build Docker Image Reusable

on:
  # El trigger 'workflow_call' es lo que hace que este workflow sea reutilizable.
  # Permite que otros workflows lo invoquen.
  workflow_call:
    # Definimos los 'inputs' que este workflow espera recibir cuando es llamado.
    inputs:
      image-name:
        description: 'Nombre de la imagen Docker a construir (ej. my-app-image)'
        required: true
        type: string
      dockerfile-path:
        description: 'Ruta al Dockerfile dentro del repositorio (ej. ./Dockerfile o ./app/Dockerfile)'
        required: false # Puedes hacerlo opcional y proporcionar un valor por defecto
        type: string
        default: './Dockerfile' # Valor por defecto si no se especifica
      context-path:
        description: 'Ruta al contexto de construcción de Docker (donde se encuentran los archivos para el build)'
        required: false
        type: string
        default: '.' # Por defecto, el directorio raíz del repositorio

    # Definimos los 'outputs' que este workflow puede devolver al workflow que lo invocó.
    outputs:
      image-tag:
        description: 'El tag completo de la imagen Docker construida (ej. ghcr.io/org/repo/my-app-image:latest)'
        value: ${{ jobs.build_image.outputs.full_image_tag }}

    # Definimos los 'secrets' que este workflow espera recibir.
    # Los secretos NO se definen aquí; solo se declaran que este workflow los necesita.
    # Se pasan desde el workflow que lo invoca.
    secrets:
      REGISTRY_USERNAME:
        description: 'Nombre de usuario para el registro de Docker (ej. Docker Hub, GHCR)'
        required: true
      REGISTRY_TOKEN:
        description: 'Token o contraseña para el registro de Docker'
        required: true

jobs:
  build_image:
    runs-on: ubuntu-latest

    # Se usa 'id' para poder referenciar los outputs de este job más adelante.
    outputs:
      full_image_tag: ${{ steps.build_and_push.outputs.full_image_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Get current date for image tag
        id: date
        run: echo "DATE=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context-path }} # Usa el input para la ruta del contexto
          file: ${{ inputs.dockerfile-path }} # Usa el input para la ruta del Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}:${{ steps.date.outputs.DATE }}
          # Aquí definimos un output de este paso para usarlo en el output del job y del workflow.
          outputs: |
            type=raw,name=full_image_tag,value=ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}:latest
            type=raw,name=image_digest,value=${{ steps.build_and_push.outputs.digest }}